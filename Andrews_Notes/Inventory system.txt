So, think of how Unity works. Unity has Entities, or GameObjects. Each GameObject has a core set of functionality, but you can add more to it by adding components.
You want your game object to detect collisions? Add a collider. Want your object to move? Create a movement script and add it as a component. 
That's composition. You're composing an object out of other objects.

You can do the same with an item system. I've made a couple, ones that used the same style as unity. 
You'd have an base entity, item. It'd have some core functionality/data. Name, value, etc.. 
Then you want the item to give ability stat like strength. You could create a child of the parent, and do some kind of ItemsThatGiveStats class. 
You could make all items have the ability to give stats but base value is at 0. Or, you can use composition, and just add that functionality when you create the item. 
It'd be something like It's like an item inventory in a sense. Just an item with a list of properties that you fill up as needed. Each item can have different properties.

Interfaces can work in an inventory system. If you have a composite based item system, you'll be using interfaces. 
Basically, items that have a bunch of different properties that you don't want all of them to share.
All of my abilities share a coreset of functionality, which is why I went inheritance. 
In fact, good practice is a mixture of both inheritance and interface use since you'll often have common functionality, with a need of branched out functionality.